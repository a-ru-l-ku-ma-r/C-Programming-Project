/**********************************************************************************************
                    Find the Longest Palindromic Substring
**********************************************************************************************/

#include <stdio.h>
#include <string.h>

// Function to print a substring str[low..high]
void printSubStr(const char* str, int low, int high)
{
	for (int i = low; i <= high; ++i)
		printf("%c", str[i]);
}

// This function prints the longest palindrome substring
// It also returns the length of the longest palindrome
int longestPalSubstr(const char* str)
{
	// Get length of input string
	int n = strlen(str);

	// All substrings of length 1 are palindromes
	int maxLength = 1, start = 0;

	// Nested loop to mark start and end index
	for (int i = 0; i < n; i++) 
	{
		for (int j = i; j < n; j++) 
		{
			int flag = 1;

			// Check palindrome
			for (int k = 0; k < (j - i + 1) / 2; k++)
			{
				if (str[i + k] != str[j - k])
				{
					flag = 0;
				}
		    }  


			// Palindrome
			if (flag && (j - i + 1) > maxLength) 
			{
				start = i;
				maxLength = j - i + 1;
			}
		}
	}

	printf("Longest palindrome substring is: ");
	printSubStr(str, start, start + maxLength - 1);
	printf("\n");

	// Return length of LPS
	return maxLength;
}

// Driver Code
int main()
{
	const char* str = "forevereverywhere";
	printf("Length is: %d\n", longestPalSubstr(str));
	return 0;
}

/**********************************************************************************************************
                                      Output
Longest palindrome substring is: reverever
Length is: 9                                  
**********************************************************************************************************/
