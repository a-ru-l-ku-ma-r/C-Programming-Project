/*******************************************************************************
*       C Program to Sort Rows in Ascending and Cols in Descending Order       *
*******************************************************************************/

#include <stdio.h>

int main()
{
    static int array1[10][10], array2[10][10];
    int i, j, k, a, m, n;

    printf("Enter no. of rows :: ");
        scanf("%d", &m);
        printf("\nEnter no. of cols :: ");
        scanf("%d",&n);
        printf("\nEnter values to the matrix :: \n");
        for (i = 0; i < m; i++)
        {
            for (j = 0; j < n; j++)
            {
                 printf("\nEnter a[%d][%d] value :: ",i,j);
                 scanf("%d", &array1[i][j]);
                 array2[i][j] = array1[i][j];
        }
    }
    printf("\nThe given matrix is \n\n");
        for (i = 0; i < m; ++i)
        {
        for (j = 0; j < n; ++j)
        {
            printf("\t%d", array1[i][j]);
        }
        printf("\n\n");
    }
    printf("\nAfter arranging rows in ascending order : \n");
    for (i = 0; i < m; ++i)
    {
        for (j = 0; j < n; ++j)
        {
            for (k =(j + 1); k < n; ++k)
            {
                if (array1[i][j] > array1[i][k])
                {
                    a = array1[i][j];
                    array1[i][j] = array1[i][k];
                    array1[i][k] = a;
                }
            }
        }
    }
    for (i = 0; i < m; ++i)
    {
        for (j = 0; j < n; ++j)
        {
            printf("\t%d", array1[i][j]);
        }
        printf("\n\n");
    }
    printf("\nAfter arranging the columns in descending order : \n");
    for (j = 0; j < n; ++j)
    {
        for (i = 0; i < m; ++i)
        {
            for (k = i + 1; k < m; ++k)
            {
                if (array2[i][j] < array2[k][j])
                {
                    a = array2[i][j];
                    array2[i][j] = array2[k][j];
                    array2[k][j] = a;
                }
            }
        }
    }
    for (i = 0; i < m; ++i)
    {
        for (j = 0; j < n; ++j)
        {
            printf("\t%d", array2[i][j]);
        }
        printf("\n\n");
    }

    return 0;
}


// *********************************************************************************************************

Enter no. of rows :: 5

Enter no. of cols :: 4

Enter values to the matrix :: 

Enter a[0][0] value :: 5

Enter a[0][1] value :: 12

Enter a[0][2] value :: 8

Enter a[0][3] value :: 14

Enter a[1][0] value :: 2

Enter a[1][1] value :: 6

Enter a[1][2] value :: 9

Enter a[1][3] value :: 15

Enter a[2][0] value :: 41

Enter a[2][1] value :: 20

Enter a[2][2] value :: 64

Enter a[2][3] value :: 28

Enter a[3][0] value :: 5

Enter a[3][1] value :: 1

Enter a[3][2] value :: 0

Enter a[3][3] value :: 6

Enter a[4][0] value :: 9

Enter a[4][1] value :: 17

Enter a[4][2] value :: 80

Enter a[4][3] value :: 46

The given matrix is 

        5       12      8       14

        2       6       9       15

        41      20      64      28

        5       1       0       6

        9       17      80      46


After arranging rows in ascending order : 
        5       8       12      14

        2       6       9       15

        20      28      41      64

        0       1       5       6

        9       17      46      80


After arranging the columns in descending order : 
        41      20      80      46

        9       17      64      28

        5       12      9       15

        5       6       8       14

        2       1       0       6
