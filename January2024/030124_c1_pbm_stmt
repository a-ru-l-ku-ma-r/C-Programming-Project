/********************************************************************************************************************
      Write a C program to remove all elements from a singly linked list that are greater than a given value x
********************************************************************************************************************/

#include<stdio.h>
#include<stdlib.h>

// Structure defining a node in a singly linked list
struct Node {
    // Data stored in the node
    int data;  
    // Pointer to the next node
    struct Node* next;  
};

// Function to create a new node with given data
struct Node* newNode(int data) {
    // Allocate memory for a new node
    struct Node* node = (struct Node*) malloc(sizeof(struct Node)); 

    // Assign data to the new node
    node->data = data; 

    // Initialize the next pointer as NULL
    node->next = NULL; 

    // Return the newly created node
    return node;  
}

// Function to delete all elements greater than x from a linked list
void remove_specific(struct Node** head, int x) 
{
    // Initialize a temporary pointer to the head of the list
    struct Node* temp = *head; 
    // Pointer to store the previous node
    struct Node* prev = NULL;  

    // Removing nodes with data greater than x from the start of the list
    while (temp != NULL && temp->data > x) {
        *head = temp->next;  // Update the head to the next node
        free(temp);  // Free the memory of the removed node
        temp = *head;  // Move temp to the new head
    }

    // Traverse the remaining list to remove nodes with data greater than x
    while (temp != NULL) {
        // Traverse until finding a node with data less than or equal to x
        while (temp != NULL && temp->data <= x) {
            prev = temp;  // Store the current node as previous
            temp = temp->next;  // Move to the next node
        }

        // If all remaining nodes are less than or equal to x, exit
        if (temp == NULL) {
            return;
        }

        // Link the previous node to the next node of temp and free temp node
        prev->next = temp->next;
        free(temp);
        temp = prev->next;
    }
}

// Function to print elements of a linked list
void displayList(struct Node* head) {
    while (head) 
    {
        // Print the data of the current node
        printf("%d ", head->data); 

        // Move to the next node
        head = head->next;  
    }
    printf("\n");
}



int main() 
{
    // Create the linked list with some initial nodes
    struct Node* head = newNode(1);  
    head->next = newNode(2);
    head->next->next = newNode(3);
    head->next->next->next = newNode(4);
    head->next->next->next->next = newNode(5);
    head->next->next->next->next->next = newNode(6);
    head->next->next->next->next->next ->next = newNode(7);
    printf("Original singly linked list:\n");

    // Display the original list
    displayList(head);  
    printf("\nRemove all elements from the said linked list that are greater than 5:\n");

    // Remove elements greater than 5 from the list
    remove_specific(&head, 5);

    // Display the modified list after removal
    displayList(head);  
    return 0;
}
