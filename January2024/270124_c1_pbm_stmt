/***********************************************************************************************************
            Write a program in C to delete the node at the end of a circular linked list
***********************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>

// Structure definition for a node in a circular linked list
struct node {
    int num;
    struct node *nextptr;
}*stnode;

struct node *tail, *p, *q, *store;

// Function prototypes
void ClListcreation(int n);
void ClListDeleteLastNode();
void displayClList(int a);

int main() {
    int n, num1, a, pos;
    stnode = NULL;

    // User input for the number of nodes
    printf("\n\n Circular Linked List : Delete node at the end of a circular linked list :\n");
    printf("--------------------------------------------------------------------------------\n");
    printf(" Input the number of nodes : ");
    scanf("%d", &n);

    // Creating a circular linked list
    ClListcreation(n);
    a = 1;
    displayClList(a);

    // Deleting the last node
    ClListDeleteLastNode();
    a = 2;
    displayClList(a);

    return 0;
}

// Function to create a circular linked list
void ClListcreation(int n) {
    int i, num;
    struct node *preptr, *newnode;

    if (n >= 1) {
        stnode = (struct node *)malloc(sizeof(struct node));

        // Input for the first node
        printf(" Input data for node 1 : ");
        scanf("%d", &num);
        stnode->num = num;
        stnode->nextptr = NULL;
        preptr = stnode;

        // Loop to create subsequent nodes and link them to form a circular list
        for (i = 2; i <= n; i++) {
            newnode = (struct node *)malloc(sizeof(struct node));
            printf(" Input data for node %d : ", i);
            scanf("%d", &num);
            newnode->num = num;
            newnode->nextptr = NULL;
            preptr->nextptr = newnode;
            preptr = newnode;
        }
        preptr->nextptr = stnode; // Last node linking with the first node to form a circular list
    }
}

// Function to delete the last node of the circular linked list
void ClListDeleteLastNode() {
    p = stnode;
    while (p->nextptr != stnode) {
        q = p;
        p = p->nextptr;
    }
    q->nextptr = stnode;
    printf("\n The deleted node is : %d", p->num);
    free(p);
}

// Function to display the circular linked list
void displayClList(int m) {
    struct node *tmp;
    int n = 1;

    if (stnode == NULL) {
        printf(" No data found in the List yet.");
    } else {
        tmp = stnode;
        if (m == 1) {
            printf("\n Data entered in the list are :\n");
        } else {
            printf("\n After deletion the new list are :\n");
        }

        // Loop to display nodes in the circular list
        do {
            printf(" Data %d = %d\n", n, tmp->num);
            tmp = tmp->nextptr;
            n++;
        } while (tmp != stnode);
    }
}
